{"version":3,"sources":["../src/common.js"],"names":["url","returnBid","get","response","returnData","data","bid","ask","getBidAskDataWallet","bitstampEuro","koinimTry","convertedTry","conseole","log","checkArbitrageRate","profitRate","notificationServices","bitstampToKoinim","koinimToBitstamp","buyingWallet","sellingWallet","percentage","diff","Math","floor","rate","from","to","messageBody","process","env","hourlyEmail","thresholdPercentage","subject","sms"],"mappings":";;;;;;;;qEAQO,iBAAmCA,GAAnC,EAAwCC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,gBAAMC,GAAN,CAAUF,GAAV,CADhB;;AAAA;AACDG,oBADC;AAEDC,sBAFC,GAEYD,SAASE,IAFrB;;AAGLJ,wBACKG,aAAaD,SAASE,IAAT,CAAcC,GADhC,GAEKF,aAAaD,SAASE,IAAT,CAAcE,GAFhC;AAHK,6CAMEH,UANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,mB;;;;;;sEASf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoB,gCADpB;;AAAA;AACDC,wBADC;AAAA;AAAA,mBAEiB,8BAFjB;;AAAA;AAEDC,qBAFC;AAAA;AAAA,mBAGoB,2CAAiBA,SAAjB,CAHpB;;AAAA;AAGDC,wBAHC;;;AAKPC,qBAASC,GAAT,CAAaJ,YAAb,EAA0B,GAA1B,EAA8BC,SAA9B,EAAwC,GAAxC,EAA4CC,YAA5C;AALO;AAAA,mBAMiBG,mBAAmBL,YAAnB,EAAgCE,YAAhC,CANjB;;AAAA;AAMHI,sBANG;AAAA;AAAA,mBAOGC,qBAAqBD,UAArB,EAAgC,UAAhC,EAA2C,QAA3C,CAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,gB;;;;;;sEAWf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoB,gCADpB;;AAAA;AACDR,wBADC;AAAA;AAAA,mBAEiB,8BAFjB;;AAAA;AAEDC,qBAFC;AAAA;AAAA,mBAGoB,2CAAiBA,SAAjB,CAHpB;;AAAA;AAGDC,wBAHC;;;AAKPC,qBAASC,GAAT,CAAaJ,YAAb,EAA0B,GAA1B,EAA8BC,SAA9B,EAAwC,GAAxC,EAA4CC,YAA5C;AALO;AAAA,mBAMmBG,mBAAmBL,YAAnB,EAAgCE,YAAhC,CANnB;;AAAA;AAMDI,sBANC;AAAA;AAAA,mBAOGC,qBAAqBD,UAArB,EAAgC,QAAhC,EAAyC,UAAzC,CAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,gB;;;;;;sEAWtB,kBAAkCC,YAAlC,EAA+CC,aAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,sBADN,GACkB,CADlB;;AAEM,gBAAIF,eAAeC,aAAnB,EAAkC;AAChCE,kBADgC,GACzBH,eAAeC,aADU;;AAEpCC,2BAAaE,KAAKC,KAAL,CAAWF,OAAOH,YAAP,GAAsB,GAAjC,CAAb;AACG;AALP,8CAMWE,UANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeP,kB;;;;;;sEASf,kBAAoCW,IAApC,EAAyCC,IAAzC,EAA8CC,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,uBADJ,iCAC8CF,IAD9C,YACyDC,EADzD,cACoEF,IADpE;;AAAA,iBAGOI,QAAQC,GAAR,CAAYC,WAHnB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIc,sBAAUH,WAAV,CAJd;;AAAA;AAAA,kBAMOH,OAAO,iBAAOO,mBANrB;AAAA;AAAA;AAAA;;AAOQJ,2CAA6BA,WAA7B;AAPR;AAAA,mBAQc,sBAAUA,WAAV,EAAsBK,OAAtB,CARd;;AAAA;AAAA,iBASYJ,QAAQC,GAAR,CAAYI,GATxB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUc,yBAAaN,WAAb,CAVd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeZ,oB;;;;;AAhDf;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA","file":"common.js","sourcesContent":["import axios from \"axios\";\nimport constants from \"./constants\";\nimport config from \"./config.js\";\nimport {sendNexmoSms, sendEmail} from './utils';\nimport {getBidEuroBitStamp, getAskEuroBitStamp} from './bitstamp/index.js';\nimport {getAskTryKoinim, getBidTryKoinim} from './koinim/index.js';\nimport {convertTryToEuro} from './currencyConversions.js';\n\nexport async function getBidAskDataWallet(url, returnBid) {\n  let response = await axios.get(url);\n  let returnData = response.data;\n  returnBid\n    ? (returnData = response.data.bid)\n    : (returnData = response.data.ask);\n  return returnData;\n}\n\nexport async function bitstampToKoinim() {\n  let bitstampEuro = await getBidEuroBitStamp();\n  let koinimTry = await getAskTryKoinim();\n  let convertedTry = await convertTryToEuro(koinimTry);\n\nconseole.log(bitstampEuro,' ',koinimTry,' ',convertedTry);\nlet profitRate =  await checkArbitrageRate(bitstampEuro,convertedTry);\n    await notificationServices(profitRate,'Bitstamp','Koinim');\n\n}\n\nexport async function koinimToBitstamp() {\n  let bitstampEuro = await getAskEuroBitStamp();\n  let koinimTry = await getBidTryKoinim();\n  let convertedTry = await convertTryToEuro(koinimTry);\n\nconseole.log(bitstampEuro,' ',koinimTry,' ',convertedTry);\n  let profitRate =  await checkArbitrageRate(bitstampEuro,convertedTry);\n    await notificationServices(profitRate,'Koinim','Bitstamp');\n}\n\n\nasync function checkArbitrageRate(buyingWallet,sellingWallet) {\n  let percentage= 0;\n      if (buyingWallet > sellingWallet) {  \n    let diff = buyingWallet - sellingWallet;\n    percentage = Math.floor(diff / buyingWallet * 100);\n      }\n    return percentage;\n}\n\nasync function notificationServices(rate,from,to) {\nlet messageBody = `Current profit rate from ${from} to ${to} is % ${rate}`;\n\n    if(process.env.hourlyEmail) {\n        await sendEmail(messageBody);\n    }\n    if(rate > config.thresholdPercentage) {\n        messageBody = `ATTENTION!! ${messageBody}`;     \n        await sendEmail(messageBody,subject);\n        if (process.env.sms) {\n        await sendNexmoSms(messageBody);\n      }\n    }\n     \n      \n    }\n\n"]}